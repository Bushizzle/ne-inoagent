/// <reference types="chrome" />
import { OutputOptions } from 'rollup';
import { OutputAsset, OutputChunk, OutputBundle } from 'rollup';
export declare type Unpacked<T> = T extends Array<infer R> ? R : never;
export declare const not: <T>(fn: (x: T) => boolean) => (x: T) => boolean;
export declare function isChunk(x: OutputChunk | OutputAsset): x is OutputChunk;
export declare function isErrorLike(x: unknown): x is Error;
export declare function isOutputOptions(x: any): x is OutputOptions;
export declare function isAsset(x: OutputChunk | OutputAsset): x is OutputAsset;
export declare function isString(x: any): x is string;
export declare function isUndefined(x: unknown): x is undefined;
export declare function isNull(x: unknown): x is null;
export declare function isPresent<T>(x: null | undefined | T): x is T;
export declare const normalizeFilename: (p: string) => string;
/** Update the manifest source in the output bundle */
export declare const updateManifest: <T extends chrome.runtime.Manifest>(updater: (manifest: T) => T, bundle: OutputBundle, handleError?: ((message: string) => void) | undefined) => OutputBundle;
